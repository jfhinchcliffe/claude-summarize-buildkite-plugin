#!/bin/bash
set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "$DIR/../lib/plugin.bash"

# Get configuration
API_KEY=$(plugin_read_config API_KEY "${BUILDKITE_API_TOKEN:-}")
CUSTOM_PROMPT=$(plugin_read_config CUSTOM_PROMPT "")

# Validate API key
if [ -z "${API_KEY}" ]; then
  echo "ERROR: BUILDKITE_API_TOKEN not configured" >&2
  exit 1
fi

# Validate agent token
if [ -z "${BUILDKITE_AGENT_ACCESS_TOKEN:-}" ]; then
  echo "ERROR: BUILDKITE_AGENT_ACCESS_TOKEN not available" >&2
  exit 1
fi

# Use buildkite.localhost for local testing, otherwise production
API_BASE_URL="${BUILDKITE_API_BASE_URL:-https://api.buildkite.com/v2}"

echo "--- Checking for failures"

# Fetch build status
BUILD_JSON=$(curl -sf \
  -H "Authorization: Bearer ${API_KEY}" \
  "${API_BASE_URL}/organizations/${BUILDKITE_ORGANIZATION_SLUG}/pipelines/${BUILDKITE_PIPELINE_SLUG}/builds/${BUILDKITE_BUILD_NUMBER}")

if [ $? -ne 0 ]; then
  echo "ERROR: Failed to fetch build status" >&2
  exit 1
fi

# Extract failed jobs
echo "${BUILD_JSON}" | jq -r '.jobs[] | select(.type == "script" and .state == "failed") | "\(.id)|\(.name)"' > /tmp/failed_jobs_${BUILDKITE_BUILD_ID}.txt

FAILED_COUNT=$(wc -l < /tmp/failed_jobs_${BUILDKITE_BUILD_ID}.txt | tr -d ' ')
echo "Found ${FAILED_COUNT} failed job(s)"

if [ "${FAILED_COUNT}" -eq 0 ]; then
  echo "No failures to analyze"
  exit 0
fi

echo "--- Fetching logs for failed jobs"

> /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt
while IFS='|' read -r job_id job_name; do
  [ -z "${job_id}" ] && continue
  echo "Fetching logs for: ${job_name}"
  echo "=== Failed Job: ${job_name} ===" >> /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt
  echo "" >> /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt

  curl -sf \
    -H "Authorization: Bearer ${API_KEY}" \
    "${API_BASE_URL}/organizations/${BUILDKITE_ORGANIZATION_SLUG}/pipelines/${BUILDKITE_PIPELINE_SLUG}/builds/${BUILDKITE_BUILD_NUMBER}/jobs/${job_id}/log" \
    >> /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt || echo "[Could not fetch logs]" >> /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt

  echo "" >> /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt
done < /tmp/failed_jobs_${BUILDKITE_BUILD_ID}.txt

echo "--- Analyzing failures with Claude"

# Build prompt - use simple concatenation to avoid issues
PROMPT="For each failed Buildkite job, provide: Job name, Root cause (one sentence), Fix (bullet points). Be concise and actionable."
PROMPT="${PROMPT} Failed Jobs: "

if [ -n "${CUSTOM_PROMPT}" ]; then
  PROMPT="${PROMPT} Additional context: ${CUSTOM_PROMPT}"
fi

# Append logs to prompt
PROMPT="${PROMPT}$(cat /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt)"

# Create payload using jq with stdin to avoid ARG_MAX issues
printf '%s' "${PROMPT}" | jq -Rs \
  --arg model "claude-sonnet-4-5" \
  '{model: $model, max_tokens: 2000, messages: [{role: "user", content: .}]}' \
  > /tmp/payload_${BUILDKITE_BUILD_ID}.json

# Call Claude via Buildkite hosted endpoint
RESPONSE=$(curl -s -X POST "${BUILDKITE_AGENT_ENDPOINT}/ai/anthropic/v1/messages" \
  -H "Content-Type: application/json" \
  -H "x-api-key: ${BUILDKITE_AGENT_ACCESS_TOKEN}" \
  -H "anthropic-version: 2023-06-01" \
  -d @/tmp/payload_${BUILDKITE_BUILD_ID}.json)

if [ $? -ne 0 ]; then
  echo "ERROR: Failed to call Claude API" >&2
  exit 1
fi

# Extract analysis
ANALYSIS=$(echo "${RESPONSE}" | jq -r '.content[0].text // empty')

if [ -z "${ANALYSIS}" ]; then
  echo "ERROR: No analysis from Claude" >&2
  echo "Response: ${RESPONSE}" >&2
  exit 1
fi

echo "--- Creating annotation"

# Create annotation
cat > /tmp/annotation_${BUILDKITE_BUILD_ID}.md << EOF
## Build Failure Analysis

**Build:** [${BUILDKITE_PIPELINE_SLUG} #${BUILDKITE_BUILD_NUMBER}](${BUILDKITE_BUILD_URL})

${ANALYSIS}
EOF

buildkite-agent annotate \
  --style "error" \
  --context "claude-analysis" \
  < /tmp/annotation_${BUILDKITE_BUILD_ID}.md

# Cleanup
rm -f /tmp/failed_jobs_${BUILDKITE_BUILD_ID}.txt
rm -f /tmp/failed_logs_${BUILDKITE_BUILD_ID}.txt
rm -f /tmp/payload_${BUILDKITE_BUILD_ID}.json
rm -f /tmp/annotation_${BUILDKITE_BUILD_ID}.md

echo "Analysis complete"
